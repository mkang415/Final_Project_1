<?xml version="1.0" encoding="UTF-8"?>

<!-- 마이바티스 3 Mapper DOCTYPE -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board.dao.face.BoardDao">
	
	<!-- 자유게시판 글 개수 -->
	<select id="freeCnt"
	 parameterType="util.BoardPaging"
	 resultType="int">
		select count(*) from board 
		where divide = 1 
		<if test="search != null and search !=''">
			and title like '%' || #{search} || '%'
		</if>
	</select>
	
	<!-- 자유게시판 리스트 가져오기 -->
	<select id="getFreeList"
	 parameterType="util.BoardPaging"
	 resultType="hashmap">
		select * from (
			select rownum rnum, B.* from (
				select board_idx, recommend, title, member.nickname, hit, writtendate
				from board, member
				where board.member_idx = member.member_idx and divide = 1 
				<if test="search != null and search != ''">
	 				AND title LIKE '%' || #{search } || '%'
	 			</if>
				order by board_idx desc
			) B order by rnum
		) board
		where rnum between #{startNo} and #{endNo}
	</select>
	
	<!-- 후기게시판 글 개수 -->
	<select id="epilCnt"
	 parameterType="util.BoardPaging"
	 resultType="int">
		select count(*) from board 
		where divide = 2 
		<if test="search != null and search !=''">
			and title like '%' || #{search} || '%'
		</if>
	</select>
	
	<!-- 후기게시판 리스트 가져오기 -->
	<select id="getEpilList"
	 parameterType="util.BoardPaging"
	 resultType="hashmap">
		select * from (
			select rownum rnum, B.* from (
				select board_idx, recommend, title, member.nickname, hit, writtendate
				from board, member
				where board.member_idx = member.member_idx and divide = 2 
				<if test="search != null and search != ''">
	 				AND title LIKE '%' || #{search } || '%'
	 			</if>
				order by board_idx desc
			) B order by rnum
		) board
		where rnum between #{startNo} and #{endNo}
	</select>
	
	<!-- 사진게시판 글 개수 -->
	<select id="photoCnt"
	 parameterType="util.BoardPaging"
	 resultType="int">
		select count(*) from board 
		where divide = 3
		<if test="search != null and search !=''">
			and title like '%' || #{search} || '%'
		</if>
	</select>
	
	<!-- 사진게시판 리스트 가져오기 -->
	<select id="getPhotoList"
	 parameterType="util.BoardPaging"
	 resultType="hashmap">
		select * from (
			select rownum rnum, B.* from (
				select board_idx, recommend, title, member.nickname, hit, writtendate
				from board, member
				where board.member_idx = member.member_idx and divide = 3
				<if test="search != null and search != ''">
	 				AND title LIKE '%' || #{search } || '%'
	 			</if>
				order by board_idx desc
			) B order by rnum
		) board
		where rnum between #{startNo} and #{endNo}
	</select>
	
	<!-- 자유게시판 게시글 인덱스로 가져오기 -->
	<select id="freeView"
	 parameterType="int"
	 resultType="dto.Board">
	 	select board_idx, recommend, title, content, member.nickname, member.member_idx, hit, divide, writtendate
		from board, member
		where board.member_idx = member.member_idx
		and board_idx = #{brdidx}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="hitPlus"
	 parameterType="int">
	 	update board set hit = hit+1
	 	where board_idx = #{brdidx}
	 </update>
	 
	 <!-- 작성 글 데이터 DB에 저장 -->
	<insert id="write"
	  parameterType="dto.Board">
	  	<selectKey keyProperty="board_idx" order="BEFORE" resultType="int">
	  		SELECT board_seq.nextval FROM dual
	  	</selectKey>
	  	insert into board(board_idx, title, content, member_idx, divide) 
	 	values (#{board_idx}, #{title}, #{content}, #{member_idx}, #{divide})
	</insert>

	<!-- 수정할 게시글 DB에서 불러오기 -->
	<select id="getUpdate"
	 parameterType="int"
	 resultType="dto.Board">
	 	select * from board
	 	where board_idx=#{board_idx}
	</select>
	 
	<!-- 수정한 게시글 DB 갱신 -->
	<update id="setUpdate"
	 parameterType="dto.Board">
	  	update board set title = #{title}, content=#{content}
	  	where board_idx = #{board_idx}
	</update>
	  
	<!-- 게시글 삭제 -->
	<delete id="delete"
	 parameterType="int">
	 	delete board
	  	where board_idx= #{board_idx}
	</delete>
	  
	<!-- 추천 수 저장 -->
	<update id="setRecommend"
	 parameterType="dto.Board">
	  	update board set recommend = #{recommend}
	  	where board_idx = #{board_idx}
	</update>
	
	<!-- 이미지 저장 -->
	<insert id="imgSave"
	 parameterType="dto.Image">
		<selectKey keyProperty="image_idx" order="BEFORE" resultType="int">
	  		SELECT image_seq.nextval FROM dual
	  	</selectKey>
	  	insert into image(image_idx, originname, storename, member_idx) 
	 	values (#{image_idx}, #{originname}, #{storename}, #{member_idx})
	</insert>
	
	<!-- 이미지 데이터 가져오기 -->
	<select id="getImage"
	 parameterType="String"
	 resultType="dto.Image">
		select * from image
		where storename = #{storename}
	</select>
	
	<!-- 이미지 board_idx 셋팅 -->
	<update id="setBrdidx"
	 parameterType="dto.Image">
	 	update image set board_idx = #{board_idx}
	 	where image_idx = #{image_idx}
	</update>
	 
	<!-- 게시글 삭제시 업로드한 이미지도 삭제 -->
	<delete id="deleteImg"
	 parameterType="int">
		delete image
		where board_idx = #{board_idx} 
	</delete>
	
	<delete id="delnullimg"
	 parameterType="int">
		delete image
		where member_idx = #{member_idx}
		and board_idx is null
	</delete>
</mapper>